{
	"info": {
		"_postman_id": "6864630f-f0aa-4354-aa6e-004d22a0b032",
		"name": "FormationSpring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23908553"
	},
	"item": [
		{
			"name": "App-e-commerce",
			"item": [
				{
					"name": "1_Product",
					"item": [
						{
							"name": "Création",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE_TIME_LIMIT = 100;",
											"",
											"// Vérifie si le code de réponse HTTP est correct lors de la création d'un Produit",
											"pm.test(\"Vérifie le code de réponse HTTP lors de la création d'un Produit (Attendu: 201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Récupère les données de la réponse JSON",
											"const responseJson = pm.response.json();",
											"",
											"// Vérifie si l'ID est renvoyé et le stocke dans l'environnement",
											"if (responseJson) {",
											"    pm.environment.set(\"product_id\", responseJson.id);",
											"}",
											"",
											"// Vérifie si les données renvoyées correspondent aux données envoyées",
											"pm.test(\"Vérifie si les données renvoyées correspondent aux données envoyées\", function () {",
											"    pm.expect(responseJson.id).to.equal(pm.variables.get(\"product_id\"));",
											"    pm.expect(responseJson.code).to.equal(pm.variables.get(\"product_code\"));",
											"    pm.expect(responseJson.name).to.equal(pm.variables.get(\"product_name\"));",
											"    pm.expect(responseJson.description).to.equal(pm.variables.get(\"product_description\"));",
											"    pm.expect(responseJson.unitPrice).to.equal(pm.variables.get(\"product_unitPrice\"));",
											"    pm.expect(responseJson.active).to.equal(pm.variables.get(\"product_active\"));",
											"    pm.expect(responseJson.unitsInStock).to.equal(pm.variables.get(\"product_unitsInStock\"));",
											"    pm.expect(responseJson.category.id).to.equal(pm.variables.get(\"product_categoryId\"));",
											"});",
											"",
											"",
											"// Vérifie si la réponse JSON du back-end est valide selon le schéma",
											"pm.test(\"Vérifie si la réponse JSON du back-end est valide pour la création de schemaProductDtoOut\", function () {",
											"    const schema = JSON.parse(pm.environment.get(\"schemaProductDtoOut\"));",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
											"});",
											"",
											"// Vérifie si le temps de réponse de l'API est inférieur à la limite définie",
											"pm.test(`Vérifie si le temps de réponse de l'API est inférieur à ${RESPONSE_TIME_LIMIT} ms`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(RESPONSE_TIME_LIMIT);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"product_code\", \"P12345\");\r",
											"pm.environment.set(\"product_name\", \"Example Product\");\r",
											"pm.environment.set(\"product_description\", \"This is an example product.\");\r",
											"pm.environment.set(\"product_unitPrice\", 19.99);\r",
											"pm.environment.set(\"product_imageUrl\", \"assets/images/products/placeholder.png\");\r",
											"pm.environment.set(\"product_active\", true);\r",
											"pm.environment.set(\"product_unitsInStock\", 100);\r",
											"pm.environment.set(\"product_categoryId\", 1);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{product_code}}\",\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"unitPrice\": {{product_unitPrice}},\r\n    \"imageUrl\": \"{{product_imageUrl}}\",\r\n    \"active\": {{product_active}},\r\n    \"unitsInStock\": {{product_unitsInStock}},\r\n    \"categoryId\": {{product_categoryId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche 0_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE_TIME_LIMIT = 100;",
											"",
											"// Vérifie si le code de réponse HTTP est correct lors de la recherche d'un Produit",
											"pm.test(\"Vérifie le code de réponse HTTP lors de la recherche d'un Produit (Attendu: 200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Récupère les données de la réponse JSON",
											"const responseJson = pm.response.json();",
											"",
											"// Vérifie si les données renvoyées correspondent aux données envoyées",
											"pm.test(\"Vérifie si les données renvoyées correspondent aux données envoyées\", function () {",
											"    pm.expect(responseJson.id).to.equal(pm.variables.get(\"product_id\"));",
											"    pm.expect(responseJson.code).to.equal(pm.variables.get(\"product_code\"));",
											"    pm.expect(responseJson.name).to.equal(pm.variables.get(\"product_name\"));",
											"    pm.expect(responseJson.description).to.equal(pm.variables.get(\"product_description\"));",
											"    pm.expect(responseJson.unitPrice).to.equal(pm.variables.get(\"product_unitPrice\"));",
											"    pm.expect(responseJson.active).to.equal(pm.variables.get(\"product_active\"));",
											"    pm.expect(responseJson.unitsInStock).to.equal(pm.variables.get(\"product_unitsInStock\"));",
											"    pm.expect(responseJson.category.id).to.equal(pm.variables.get(\"product_categoryId\"));",
											"});",
											"",
											"// Vérifie si la réponse JSON du back-end est valide selon le schéma",
											"pm.test(\"Vérifie si la réponse JSON du back-end est valide pour la recherche de schemaProductDtoOut\", function () {",
											"    const schema = JSON.parse(pm.environment.get(\"schemaProductDtoOut\"));",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
											"});",
											"",
											"// Vérifie si le temps de réponse de l'API est inférieur à la limite définie",
											"pm.test(`Vérifie si le temps de réponse de l'API est inférieur à ${RESPONSE_TIME_LIMIT} ms`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(RESPONSE_TIME_LIMIT);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/{{product_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recherche 0_n",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE_TIME_LIMIT = 100;",
											"",
											"// Vérifie si le code de réponse HTTP est correct lors de la recherche de Produits",
											"pm.test(\"Vérifie le code de réponse HTTP lors de la recherche de Produits (Attendu: 200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Récupère les données de la réponse JSON",
											"const responseJson = pm.response.json();",
											"",
											"// Vérifie si la réponse JSON du back-end est valide selon le schéma",
											"pm.test(\"Vérifie si la réponse JSON du back-end est valide pour la recherche de schemaProductDtoOutShort\", () => {",
											"    const responseData = pm.response.json();",
											"    const schema = JSON.parse(pm.environment.get(\"schemaProductDtoOutShort\"));",
											"    responseData.forEach(function(product) {",
											"        pm.expect(tv4.validate(product, schema)).to.be.true;",
											"    });",
											"});",
											"",
											"// Vérifie si le temps de réponse de l'API est inférieur à la limite définie",
											"pm.test(`Vérifie si le temps de réponse de l'API est inférieur à ${RESPONSE_TIME_LIMIT} ms`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(RESPONSE_TIME_LIMIT);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE_TIME_LIMIT = 200;\r",
											"\r",
											"// Vérifie si le code de réponse HTTP est correct lors de la modification d'un Produit\r",
											"pm.test(\"Vérifie le code de réponse HTTP lors de la modification d'un Produit (Attendu: 200)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Récupère les données de la réponse JSON\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Vérifie si les données renvoyées correspondent aux données envoyées\r",
											"pm.test(\"Vérifie si les données renvoyées correspondent aux données envoyées\", function () {\r",
											"    pm.expect(responseJson.id).to.equal(pm.variables.get(\"product_id\"));\r",
											"    pm.expect(responseJson.code).to.equal(pm.variables.get(\"product_code\"));\r",
											"    pm.expect(responseJson.name).to.equal(pm.variables.get(\"product_name\"));\r",
											"    pm.expect(responseJson.description).to.equal(pm.variables.get(\"product_description\"));\r",
											"    pm.expect(responseJson.unitPrice).to.equal(pm.variables.get(\"product_unitPrice\"));\r",
											"    pm.expect(responseJson.active).to.equal(pm.variables.get(\"product_active\"));\r",
											"    pm.expect(responseJson.unitsInStock).to.equal(pm.variables.get(\"product_unitsInStock\"));\r",
											"    pm.expect(responseJson.category.id).to.equal(pm.variables.get(\"product_categoryId\"));\r",
											"});\r",
											"\r",
											"// Vérifie si la réponse JSON du back-end est valide selon le schéma\r",
											"pm.test(\"Vérifie si la réponse JSON du back-end est valide pour la modification de schemaProductDtoOut\", function () {\r",
											"    const schema = JSON.parse(pm.environment.get(\"schemaProductDtoOut\"));\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Vérifie si le temps de réponse de l'API est inférieur à la limite définie\r",
											"pm.test(`Vérifie si le temps de réponse de l'API est inférieur à ${RESPONSE_TIME_LIMIT} ms`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(RESPONSE_TIME_LIMIT);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"product_name\", \"Example Product Update\");\r",
											"pm.environment.set(\"product_description\", \"This is an example product. Update\");\r",
											"pm.environment.set(\"product_unitPrice\", 14.99);\r",
											"pm.environment.set(\"product_imageUrl\", \"assets/images/products/placeholder.png\");\r",
											"pm.environment.set(\"product_active\", true);\r",
											"pm.environment.set(\"product_unitsInStock\", 99);\r",
											"pm.environment.set(\"product_categoryId\", 1);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{product_code}}\",\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"unitPrice\": {{product_unitPrice}},\r\n    \"imageUrl\": \"{{product_imageUrl}}\",\r\n    \"active\": {{product_active}},\r\n    \"unitsInStock\": {{product_unitsInStock}},\r\n    \"categoryId\": {{product_categoryId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products/{{product_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suppression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE_TIME_LIMIT = 100;\r",
											"\r",
											"// Vérifie si le code de réponse HTTP est correct lors de la suppression du Produit\r",
											"pm.test(\"Vérifie le code de réponse HTTP lors de la suppression du Produit (Attendu : 204)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// Après la suppression du Produit, les variables d'environnement correspondantes ne sont plus nécessaires.\r",
											"// Par conséquent, nous les supprimons pour garder notre environnement propre.\r",
											"\r",
											"// Liste des variables à supprimer\r",
											"const varsToUnset = [\r",
											"    \"product_id\", \r",
											"    \"product_code\",\r",
											"    \"product_name\",\r",
											"    \"product_description\",\r",
											"    \"product_unitPrice\",\r",
											"    \"product_imageUrl\",\r",
											"    \"product_active\",\r",
											"    \"product_unitsInStock\", \r",
											"    \"product_categoryId\", \r",
											"];\r",
											"\r",
											"pm.test(\"Vérifie la suppression des variables d'environnement\" , function () {\r",
											"\r",
											"// Parcourir la liste des variables à supprimer\r",
											"varsToUnset.forEach(varName => {\r",
											"    // Supprimer la variable de l'environnement\r",
											"    pm.environment.unset(varName);\r",
											"\r",
											"    // Vérifier que la variable a été supprimée\r",
											"        pm.expect(pm.environment.has(varName)).to.be.false;\r",
											"    });\r",
											"});\r",
											"\r",
											"// Vérifie si le temps de réponse de l'API est inférieur à la limite définie\r",
											"pm.test(`Vérifie si le temps de réponse de l'API est inférieur à ${RESPONSE_TIME_LIMIT} ms`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(RESPONSE_TIME_LIMIT);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/{{product_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Schema for ProductDtoOut",
									"",
									"const schemaProductDtoOut = {",
									"        type: \"object\",",
									"        properties: {",
									"            id: { type: \"number\", minimum: 0 },",
									"            code: { type: \"string\", minLength: 1 },",
									"            name: { type: \"string\", minLength: 1 },",
									"            description: { type: \"string\" },",
									"            unitPrice: { type: \"number\" },",
									"            imageUrl: { type: \"string\" },",
									"            active: { type: \"boolean\" },",
									"            unitsInStock: { type: \"integer\" },",
									"            dateCreated: { type: \"string\" },",
									"            lastUpdated: { type: \"string\" },",
									"            category: {",
									"                type: \"object\",",
									"                properties: {",
									"                    id: { type: \"integer\" },",
									"                    code: { type: \"string\" },",
									"                    name: { type: \"string\" }",
									"                },",
									"                required: [\"id\", \"code\", \"name\"]",
									"            }",
									"        },",
									"        required: [\"id\", \"code\", \"name\", \"description\", \"unitPrice\", \"imageUrl\", \"active\", \"unitsInStock\", \"dateCreated\", \"lastUpdated\", \"category\"]",
									"    };",
									"",
									"pm.environment.set(\"schemaProductDtoOut\", JSON.stringify(schemaProductDtoOut));",
									"",
									"// Schema for ProductDtoOutShort",
									"const schemaProductDtoOutShort = {",
									"        type: \"object\",",
									"        properties: {",
									"            id: { type: \"number\" },",
									"            code: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            description: { type: \"string\" },",
									"            unitPrice: { type: \"number\" },",
									"            imageUrl: { type: \"string\" },",
									"            category: {",
									"                type: \"object\",",
									"                properties: {",
									"                    id: { type: \"number\" },",
									"                    code: { type: \"string\" },",
									"                    name: { type: \"string\" }",
									"                },",
									"                required: [\"id\", \"code\", \"name\"]",
									"            }",
									"        },",
									"        required: [\"id\", \"code\", \"name\", \"description\", \"unitPrice\", \"imageUrl\", \"category\"]",
									"    };",
									"pm.environment.set(\"schemaProductDtoOutShort\", JSON.stringify(schemaProductDtoOutShort));",
									"",
									"// Schema for ProductDtoIn",
									"const schemaProductDtoIn = {}",
									"pm.environment.set(\"schemaProductDtoIn\", JSON.stringify());",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2_Category",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}